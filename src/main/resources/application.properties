server.port=9090
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.initialization-mode=always
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE

security.oauth2.resource.filter-order=3
security.signing_key=MaYzkSjmkzPC57L
security.encoding_strength=256
security.security_realm=School academy auth realm
security.jwt.client_id=client_id
security.jwt.client_secret=OUtF412!sccv
security.jwt.grant_type=password
security.jwt.scope_read=read
security.jwt.scope_write=write
security.jwt.resource_ids=resourceID



#
#адача
#Да се реализира електронен дневник, който служи за въвеждане, редактиране изтриване и визуализиране на информация относно резултати на ученици от 1-ви до 12-ти клас.
#Функционални изисквания на системата
#Електронният дневник трябва да включва минимум следните функционалности:
#•	Въвеждане на данни за училище (име и адрес)
#•	Възможност за записване (отписване) на учениците в определен клас в дадено училище
#•	Въвеждане, редактиране и изтриване на данни за преподавател (лични данни + предмети, по които има квалификация да преподава) в дадено училище
#•	Въвеждане, редактиране и изтриване на данни за ученик в дадено училище: лични данни + класа, в който е записан.
#•	Въвеждане, редактиране и изтриване на данни за родител: лични данни + на кой/и ученик/ученици е родител
#•	Всеки учител може да въвежда, редактира и изтрива оценките само за учениците, на които преподава.
#•	Да може да се вижда статистическа информация за разпределението на оценките и отсъствията във всички училища, във всички предмети и по отделни училища и предмети.
#
#Технологични изисквания
#Разработената система трябва да се състои от код, база данни и документация. Кодът трябва да включва подробни коментари. Документацията трябва да се състои от детайлно описание на фунционалностите на системата, включително екрани, на които ясно се вижда коя част от програмата за какво се изполва.
#Оценяване
#Оценяването на участниците в проекта включва следните компоненти:

#SELECT
#SUM(science_grades) as 'science_grades',
#SUM(technology_grades) as 'technology_grades',
#SUM(engineering_grades) as 'engineering_grades',
#SUM(maths_grades) as 'maths_grades',
#(SUM(science_grades) + SUM(technology_grades) + SUM(engineering_grades)+ SUM(maths_grades))
#FROM students where first_name = 'John' and last_name = 'Doe'
#
#
#
#select * from public.app_role
#select * from public.user_role
#select * from public.app_user
#
#
#
#
#select * from public.students
#
#
#insert into public.students(id,email_address,engineering_grades,first_name,grade,last_name,maths_grades,password,school,science_grades,technology_grades,usernam)
#values (1,	'john_ddoe@mail.com' ,6,	'John'	,2,	'Doe',	6,'password',	'Englishacademy'	,5,	5,'username')
#
#
#
#INSERT INTO app_role (id, role_name, description) VALUES (1, 'STANDARD_USER', 'Standard User - Has no admin rights');
#INSERT INTO app_role (id, role_name, description) VALUES (2, 'ADMIN_USER', 'Admin User - Has permission to perform admin tasks');
#
#-- USER
#-- non-encrypted password: jwtpass
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (1, 'John', 'Doe', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'milen.yakov');
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (2, 'Admin', 'Admin', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'admin.admin');
#
#
##
#---
#INSERT INTO app_role (id, role_name, description) VALUES (1, 'STANDARD_USER', 'Standard User - Can view all data but has no admin rights');
#INSERT INTO app_role (id, role_name, description) VALUES (2, 'ADMINISTRATOR', 'Administrator - Has permission to perform admin tasks');
#INSERT INTO app_role (id, role_name, description) VALUES (3, 'ENGLISH_TEACHER', 'English teacher - Can update students information and grades only in English Academy but has no admin rights');
#INSERT INTO app_role (id, role_name, description) VALUES (4, 'BULGARIAN_TEACHER', 'Bulgarian teacher - Can update students information and grades only in Bulgarian Academy but has no admin rights');
#INSERT INTO app_role (id, role_name, description) VALUES (5, 'RUSSIAN_TEACHER', 'English teacher - Can update students information and grades only in Russian Academy but has no admin rights');
#
#
#
#-- USER
#-- non-encrypted password: jwtpass
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (1, 'Milen', 'Yakov', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'milen.yakov');
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (2, 'Georgi', 'Ivanov', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'georgi.iv');
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (3, 'Ken', 'Block', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'ken.uk');
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (4, 'Vinislava', 'Lubomirova', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'vini.bg');
#INSERT INTO app_user (id, first_name, last_name, password, username) VALUES (5, 'Katya', 'Ivanova', '$2a$10$qtH0F1m488673KwgAfFXEOWxsoZSeHqqlB/8BTt3a6gsI5c2mdlfe', 'kkatya');
#
#
#
#INSERT INTO user_role(user_id, role_id) VALUES(1,1);
#INSERT INTO user_role(user_id, role_id) VALUES(2,1);
#INSERT INTO user_role(user_id, role_id) VALUES(2,2);
#INSERT INTO user_role(user_id, role_id) VALUES(3,3);
#INSERT INTO user_role(user_id, role_id) VALUES(4,4);
#INSERT INTO user_role(user_id, role_id) VALUES(5,5);
#
#
